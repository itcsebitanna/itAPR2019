4 A .IDENTIFICATION OF ARITHMETIC OPERATOR
AIM
To write a c program to do exercise on syntax analysis using YACC.

INTRODUCTION
YACC (yet another compiler) is a program designed to produce designed to compile a LALR (1) grammar and to produce the source code of the synthetically analyses of the language produced by the grammar.

ALGORITHM
1. Start the program.
2. Write the code for parser. l in the declaration port.
3. Write the code for the ‘y’ parser.
4. Also write the code for different arithmetical operations.
5. Write additional code to print the result of computation.
6. Execute and verify it.
7. Stop the program.

arith_id.l
%{
#include "y.tab.h"
%}
%%
"=" { printf("\n operator is equal"); }
"+" { printf("\n operator is plus"); }
"-" { printf("\n operator is minus"); }
"/" { printf("\n operator is division"); }
"*" { printf("\n operator is multiplicatin"); }
[a-z A-Z]*[0-9]* { printf("\n identifier is %s",yytext);
return ID;
}
return yytext[0];
\n return 0;
%%
int yywrap()
{
 return 1;
}
arith_id.y
%{
#include<stdio.h>
%}
%token A,ID
%%
statement:A"="E
|E { printf("\n valid arithmetic expression");
$$=$1;
};
E:E'+'ID
|E'-'ID
|E'*'ID
|E'/'ID
|ID
;
%%
extern FILE *yyin;
main()
{
do
{
yyparse();
}
while(!feof(yyin));
}
yyerror(char *s)
{
}
Output:
a=d+b
a is a identifier
operator is equal
d is a identifier
operator is plus
b is a identifier

4 B.Identification of valid identifier    
variable_test.l
%{
#include "y.tab.h"
%}
%%
"int" { return INT; }
"float" { return FLOAT; }
"double " { return DOUBLE; }
[a-zA-Z]*[0-9]* { printf("\n identifier is %s",yytext); return ID; }
[0-9]*[a-zA-z]* { printf("\ninvalid identifier"); return ID; }
[+|-|*|/|%|=]* { printf("\nterminals %s",yytext); return ID; }
[,| |;] { return ID; }
return yytext[0];
\n return 0;
%%
int yywrap()
{
 return 1;
}
variable_test.y
%{
#include<stdio.h>
%}
%token ID INT FLOAT DOUBLE
%%
D:T L
;
L:L,ID
|ID
;
T:INT
|FLOAT
|DOUBLE
;
%%
extern FILE *yyin;
main()
{
do
{
yyparse();
}
while(!feof(yyin));
}
yyerror(char *s)
{
}
Output:
int x
identifier is x

4 C.Implementation of calculator
calci.l
%{
#include<stdio.h>
#include"y.tab.h"
extern int yylval;
%}
%%
[0-9]*+ { yylval=atoi(yytext); return NUMBER; }
[\t]
[\n] return 0;
. return yytext[0];
%%
int yywrap()
{
return 1;
}
calci.y
%{
#include<stdio.h>
int flag=0;
%}
%token NUMBER
%left 't' '-'
%left '*' '/' '%'
%left '(' ')'
%right UMINUS
%%
ArithmeticExpression:E { printf("\n result:%d\n",$$); };
E:E '+' E { $$ = $1 + $3; }
 |E '-' E { $$ = $1 - $3; }
 |E '*' E { $$ = $1 * $3; }
 |E '/' E { $$ = $1 / $3; }
 |E '%' E { $$ = $1 % $3; }
 |'(' E ')' { $$ = $2; }
 |NUMBER { $$ = $1; }
 |'-'E%prec UMINUS { $$ = - $2; }
;
%%
void main()
{
printf("\n enter any arithmetic expression:\n");
yyparse();
if(flag==0)
printf("\n entered exp is valid");
}
Output:
Enter any arithmetic expression
(25+3)*-10
Result :-280
Entered expression is valid
